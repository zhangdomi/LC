# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isSubtree(self, root, subRoot):
        """
        :type root: Optional[TreeNode]
        :type subRoot: Optional[TreeNode]
        :rtype: bool
        """
        def isSame(r, subr):
            if r == None and subr == None:
                return True
            if r == None or subr == None:
                return False
            if r.val != subr.val:
                return False
            return isSame(r.left, subr.left) and isSame(r.right, subr.right)

        if root == None and subRoot == None:
            return True

        if root == None or subRoot == None:
            return False
        if isSame(root, subRoot):
            return True
        else:
            return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
